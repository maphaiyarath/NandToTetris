// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // ARegister ===========================================================================
    Not (in = instruction[15], out = isAInstruction);
    And (a = instruction[15], b = instruction[5], out = isCAndAIsDest);
    Or (a = isAInstruction, b = isCAndAIsDest, out = loadA);
    Mux16 (a = instruction, b = outFromALU, sel = instruction[15], out = outToA);
    ARegister (in = outToA, load = loadA, out = outToPC, out[0..14] = addressM, out = AMux);

    // A / M Mux ===========================================================================
    Mux16 (a = AMux, b = inM, sel = instruction[12], out = inputAM);

    // DRegister ===========================================================================
    And (a = instruction[15], b = instruction[4], out = loadD);
    DRegister (in = outToD, load = loadD, out = inputD);

    // ALU =================================================================================    
    ALU (x = inputD, y = inputAM, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outM, out = outToD, out = outFromALU, zr = zero, ng = negative);

    // writeM ==============================================================================
    And (a = instruction[15], b = instruction[3], out = writeM);

    // PC ==================================================================================
    // jgt
    Not (in = zero, out = nonzero);
    Not (in = negative, out = nonNegative);
    And (a = nonNegative, b = nonzero, out = positive);
    And (a = positive, b = instruction[0], out = jgt);

    // jeq
    And (a = zero, b = instruction[1], out = jeq);

    // jge
    Or (a = jgt, b = jeq, out = jge);

    // jlt
    And (a = negative, b = instruction[2], out = jlt);

    // jne
    Not (in = zero, out = nonZero);
    And (a = instruction[0], b = instruction[2], out = jneCondition);
    And (a = nonZero, b = jneCondition, out = jne);

    // jle
    Or (a = jlt, b = jeq, out = jle);

    // jmp
    And (a = instruction[0], b = instruction[1], out = andZeroAndOne);
    And (a = andZeroAndOne, b = instruction[2], out = andAll);
    And (a = andAll, b = true, out = jmp);

    Or8Way (in[0] = false, in[1] = jgt, in[2] = jeq, in[3] = jge, in[4] = jlt, in[5] = jne, in[6] = jle, in[7] = jmp, out = jump);
    And (a = instruction[15], b = jump, out = loadToPC);
    PC (in = outToPC, load = loadToPC, inc = true, reset = reset, out[0..14] = pc);
}