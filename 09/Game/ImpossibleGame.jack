class CellGame {
    field Cell player;
    field Cell cellA, cellB, cellC, cellD, cellE;
    field boolean gamePlaying;
    field int direction;
    field int enemyCount; //0=none,1=up,2=down,3=left,4=right

    constructor CellGame new() {
        let player = Cell.new(20, 20, 5);
        let cellA = Cell.new(100, 20, 4);
        let cellB = Cell.new(200, 100, 30);
        let cellC = Cell.new(50, 200, 8);
        let cellD = Cell.new(150, 150, 16);
        let cellE = Cell.new(400, 100, 10);
        let direction = 0;
        let enemyCount = 5;
        let gamePlaying = true;
        return this;
    }

    method void dispose() {
        do player.dispose();
        do smallCell.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void collision(Cell a, Cell b) {
        if ((a.getX() = b.getX()) &
             (a.getY() = b.getY()) &
             (a.getAlive() = true) &
             (b.getAlive() = true)) {
             if (a.getSize() > b.getSize()) {
                do a.incSize(b.getSize());
                do b.setAlive(false);
                let enemyCount = enemyCount - 1;
             }
             if (a.getSize() < b.getSize()) {
                do b.incSize(a.getSize());
                do a.setAlive(false);
                let gamePlaying = false;
             }
        }
        do Output.moveCursor(0, 30);
        do Output.printChar(32);
        do Output.printInt(a.getX());
        do Output.printChar(44);
        do Output.printInt(a.getY());
        return;
    }


    method void run() {
        var char key;
        var boolean exit;

        let exit = false;

        while ((~exit) & (enemyCount > 0) & gamePlaying) {
            do player.update();
            do cellA.update();
            do cellB.update();
            do cellC.update();
            do cellD.update();
            do cellE.update();
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveCell();
            }

            if (key = 81) {
                let exit = true;
            }
            if (key = 131) {
                let direction = 1;
            }
            if (key = 133) {
                let direction = 2;
            }
            if (key = 130) {
                let direction = 3;
            }
            if (key = 132) {
                let direction = 4;
            }
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveCell();
            }
        }
        if ((enemyCount < 0) | (enemyCount = 0)) {
            do player.erase();
            do Output.moveCursor(0, 0);
            do Output.printString("You Win!");
        }
        if (~gamePlaying) {
            do player.erase();
            do Output.moveCursor(0, 0);
            do Output.printString("Your Were Eaten!");
        }
            
        return;
    }

    method void moveCell() {
        do collision(player, cellA);
        do collision(player, cellB);
        do collision(player, cellC);
        do collision(player, cellD);
        do collision(player, cellE);
        if (direction = 1) {
            do player.moveUp();
        }
        if (direction = 2) {
            do player.moveDown();
        }
        if (direction = 3) {
            do player.moveLeft();
        }
        if (direction = 4) {
            do player.moveRight();
        }

        do Sys.wait(5); // Delays the next movement.
        return;
    }
}

/*
class ImpossibleGame {
    // collision
    // if touch another object, then restart
    // and clear screen

    // 256 x 512

    field Square square;
    field Spike spike; // use array?
    field int direction;
    field boolean gameRunning;

    constructor ImpossibleGame new()
    {
        let spike = Spike.new (400, 199);
        let square = Square.new (50, 199, 30);
        let direction = 0;

        // ground
        do Screen.drawLine (25, 230, 487, 230);

        return this;
    }

    method void dispose()
    {
        do spike.dispose();
        do square.dispose();
        do Memory.deAlloc (this);
        return;
    }

    method void run()
    {
        var char key;
        var boolean exit;

        let exit = false;

        while (~exit)
        {
            while (key = 0)
            {
                let key = Keyboard.keyPressed();
                do moveSquare();
            }

            // q = quit
            if (key = 81)
            {
                let exit = true;
            }

            // up arrow = jump
            if (key = 131)
            {
                let direction = 1;
            }

            while (~(key = 0))
            {
                let key = Keyboard.keyPressed();
                do moveSquare();
            }
        }

        return;
    }

    method void moveSquare()
    {
        if (direction = 1)
        {
            do square.jump();
        }

        do Sys.wait(5);
        return;
    }

    method void moveSpike()
    {
        return;
    }

    method void restart()
    {
        // do Screen.clearScreen();
        return;
    }

}
*/